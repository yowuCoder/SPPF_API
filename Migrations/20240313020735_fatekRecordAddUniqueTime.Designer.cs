// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SPPF_API.Models.COTIOT;

#nullable disable

namespace SPPF_API.Migrations
{
    [DbContext(typeof(CotiotContext))]
    [Migration("20240313020735_fatekRecordAddUniqueTime")]
    partial class fatekRecordAddUniqueTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<int?>("ExpiresAt")
                        .HasColumnType("int")
                        .HasColumnName("expires_at");

                    b.Property<string>("IdToken")
                        .HasColumnType("text")
                        .HasColumnName("id_token");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderAccountId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("providerAccountId");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Scope")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("scope");

                    b.Property<string>("SessionState")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("session_state");

                    b.Property<string>("TokenType")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("token_type");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("Account_pkey");

                    b.HasIndex(new[] { "Provider", "ProviderAccountId" }, "Account_provider_providerAccountId_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "Account_userId_idx");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.AlarmRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AlarmId")
                        .HasColumnType("int")
                        .HasColumnName("alarm_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("Duration")
                        .HasColumnType("float")
                        .HasColumnName("duration");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("alarm_record_pkey");

                    b.HasIndex(new[] { "AlarmId" }, "alarm_record_alarm_id_idx");

                    b.ToTable("alarm_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.AlarmSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<double?>("Max")
                        .HasColumnType("float")
                        .HasColumnName("max");

                    b.Property<double?>("Min")
                        .HasColumnType("float")
                        .HasColumnName("min");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("alarm_setting_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "alarm_setting_device_id_idx");

                    b.ToTable("alarm_setting", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.ConnectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("connection_status_pkey");

                    b.ToTable("connection_status", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("department_pkey");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<bool>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("enable");

                    b.Property<string>("Line")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("line");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("OfficeGroup")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("office_group");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("device_pkey");

                    b.HasIndex(new[] { "CategoryId" }, "device_category_id_idx");

                    b.HasIndex(new[] { "DeviceId" }, "device_device_id_key")
                        .IsUnique();

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.EnvRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<double>("Humidity")
                        .HasColumnType("float")
                        .HasColumnName("humidity");

                    b.Property<double>("Temperature")
                        .HasColumnType("float")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("env_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "env_record_device_id_idx");

                    b.ToTable("env_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.FatekRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("adress");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("line");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("fatek_record_pkey");

                    b.HasIndex(new[] { "Adress", "Line", "Time" }, "fatek_record_adress_line_time_key")
                        .IsUnique();

                    b.ToTable("fatek_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.OperatorRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("operator");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("operator_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "operator_record_device_id_idx");

                    b.ToTable("operator_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.PlcSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("protocol");

                    b.Property<double>("Second")
                        .HasColumnType("float")
                        .HasColumnName("second");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("plc_setting_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "plc_setting_device_id_idx");

                    b.ToTable("plc_setting", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.PrismaMigration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<int>("AppliedStepsCount")
                        .HasColumnType("int")
                        .HasColumnName("applied_steps_count");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("checksum");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("finished_at");

                    b.Property<string>("Logs")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("logs");

                    b.Property<string>("MigrationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("migration_name");

                    b.Property<DateTimeOffset?>("RolledBackAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("rolled_back_at");

                    b.Property<DateTimeOffset>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK___prisma___3213E83FFB700BD3");

                    b.ToTable("_prisma_migrations", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("sessionToken");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("Session_pkey");

                    b.HasIndex(new[] { "SessionToken" }, "Session_sessionToken_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "Session_userId_idx");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("setting_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "setting_device_id_idx");

                    b.ToTable("setting", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.SolidRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("Solid")
                        .HasColumnType("float")
                        .HasColumnName("solid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("solid_record_pkey");

                    b.ToTable("solid_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.SpeedRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<double>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("speed_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "speed_record_device_id_idx");

                    b.ToTable("speed_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerified")
                        .HasColumnType("datetime2")
                        .HasColumnName("emailVerified");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Email" }, "User_email_key")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.VerificationToken", b =>
                {
                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("identifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("token");

                    b.HasIndex(new[] { "Identifier", "Token" }, "VerificationToken_identifier_token_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Token" }, "VerificationToken_token_key")
                        .IsUnique();

                    b.ToTable("VerificationToken", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.ViscosityRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<double>("Viscosity")
                        .HasColumnType("float")
                        .HasColumnName("viscosity");

                    b.HasKey("Id")
                        .HasName("viscosity_record_pkey");

                    b.ToTable("viscosity_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.VocRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<double>("Voc")
                        .HasColumnType("float")
                        .HasColumnName("voc");

                    b.HasKey("Id")
                        .HasName("voc_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "voc_record_device_id_idx");

                    b.ToTable("voc_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.WeightRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("weight_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "weight_record_device_id_idx");

                    b.ToTable("weight_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.WmvRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("device_id");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<DateTime>("ProductTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("product_time");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("wmv_record_pkey");

                    b.HasIndex(new[] { "DeviceId" }, "wmv_record_device_id_idx");

                    b.ToTable("wmv_record", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("line");

                    b.Property<double>("Number")
                        .HasColumnType("float")
                        .HasColumnName("number");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("")
                        .HasColumnName("order_name");

                    b.Property<double>("ProductNumber")
                        .HasColumnType("float")
                        .HasColumnName("product_number");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("work_orders_pkey");

                    b.ToTable("work_orders", (string)null);
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Account", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Account_userId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.AlarmRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.AlarmSetting", "Alarm")
                        .WithMany("AlarmRecords")
                        .HasForeignKey("AlarmId")
                        .IsRequired()
                        .HasConstraintName("alarm_record_alarm_id_fkey");

                    b.Navigation("Alarm");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.AlarmSetting", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("AlarmSettings")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("alarm_setting_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Device", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Category", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("device_category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.EnvRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("EnvRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("env_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.OperatorRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("OperatorRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("operator_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.PlcSetting", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("PlcSettings")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("plc_setting_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Session", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Session_userId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Setting", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("Settings")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("setting_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.SpeedRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("SpeedRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("speed_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.User", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("User_department_id_fkey");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.VocRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("VocRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("voc_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.WeightRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("WeightRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("weight_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.WmvRecord", b =>
                {
                    b.HasOne("SPPF_API.Models.COTIOT.Device", "Device")
                        .WithMany("WmvRecords")
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("wmv_record_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.AlarmSetting", b =>
                {
                    b.Navigation("AlarmRecords");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Category", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.Device", b =>
                {
                    b.Navigation("AlarmSettings");

                    b.Navigation("EnvRecords");

                    b.Navigation("OperatorRecords");

                    b.Navigation("PlcSettings");

                    b.Navigation("Settings");

                    b.Navigation("SpeedRecords");

                    b.Navigation("VocRecords");

                    b.Navigation("WeightRecords");

                    b.Navigation("WmvRecords");
                });

            modelBuilder.Entity("SPPF_API.Models.COTIOT.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
